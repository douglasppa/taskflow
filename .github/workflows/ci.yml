name: CI

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

jobs:
  backend-lint:
    name: backend-lint 🧹
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run linters
        run: |
          cd backend
          ruff check .
          black --check .

  backend-test:
    name: backend-test 🧪
    runs-on: ubuntu-latest
    needs: backend-lint

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: taskflow_user
          POSTGRES_PASSWORD: taskflow_pass
          POSTGRES_DB: taskflow_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_USER: taskflow_user
      POSTGRES_PASSWORD: taskflow_pass
      POSTGRES_DB: taskflow_db
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

      MONGO_URL: mongodb://localhost:27017
      MONGO_DB_NAME: taskflow

      RABBITMQ_URL: amqp://guest:guest@localhost:5672//
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest

      SECRET_KEY: changeme
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      RESET_TOKEN_EXPIRE_MINUTES: 15
      PROMETHEUS_PORT: 9000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run tests and generate coverage
        working-directory: backend
        run: |
          coverage run --source=app -m pytest
          coverage xml -o coverage.xml
          sed -i 's|<source>.*</source>|<source>backend/app</source>|' coverage.xml
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/coverage.xml

  frontend-lint:
    name: frontend-lint 🧹
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy VERSION to frontend/src/utils
        run: cp VERSION frontend/src/utils/VERSION

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint (ESLint)
        working-directory: frontend
        run: npx eslint .

      - name: Prettier check
        working-directory: frontend
        run: npx prettier --check .

      - name: Type check (TypeScript)
        working-directory: frontend
        run: npx tsc --noEmit

      - name: Build
        working-directory: frontend
        run: npm run build

  frontend-test:
    name: frontend-test 🧪
    runs-on: ubuntu-latest
    needs: frontend-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run Vitest with coverage
        working-directory: frontend
        run: npx vitest run --coverage

  sonarcloud:
    name: sonarcloud 🔍
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run vitest (coverage)
        working-directory: frontend
        run: npx vitest run --coverage

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Move report to backend
        run: mkdir -p backend && mv coverage.xml backend/

      - name: Debug coverage path
        run: |
          ls -l backend/coverage.xml
          head -n 20 backend/coverage.xml

      - name: SonarCloud Scan (monorepo)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=douglasppa_taskflow
            -Dsonar.organization=douglasppa
            -Dsonar.sources=backend/app,frontend/src
            -Dsonar.tests=backend/tests,frontend/src/__tests__
            -Dsonar.python.coverage.reportPaths=backend/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.test.inclusions=frontend/src/__tests__/**/*.test.ts,frontend/src/__tests__/**/*.test.tsx
            -Dsonar.coverage.inclusions=backend/app/**,frontend/src/**
            -Dsonar.coverage.exclusions=backend/tests/**,frontend/src/__tests__/**
            -Dsonar.projectBaseDir=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  render-deploy:
    name: render-deploy 🚀
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Trigger Render Deploy Hook
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

  vercel-deploy:
    name: vercel-deploy 🚀
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Config Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Copy VERSION to frontend/src/utils
        run: cp VERSION frontend/src/utils/VERSION

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Trigger Vercel Deploy
        working-directory: ./frontend
        run: |
          npx vercel \
            --prod \
            --yes \
            --token ${{ secrets.VERCEL_DEPLOY_TOKEN }}